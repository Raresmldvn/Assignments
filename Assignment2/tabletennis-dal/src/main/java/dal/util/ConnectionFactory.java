package dal.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;


public class ConnectionFactory {

	private static final String DRIVER = "com.mysql.jdbc.Driver";
	private static final String DBURL = "jdbc:mysql://localhost:3306/tabletennis?autoReconnect=true&useSSL=false";
	private static final String USER = "root";
	private static final String PASS = "0740115565";
	
	private static ConnectionFactory oneInstance = new ConnectionFactory();
	
	/*
	 * Constructor that constructs the driver.
	 */
	private ConnectionFactory() {
		try {
			Class.forName(DRIVER);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Create the connection making use of the database url and the server passwords and user.
	 * @return Returns the connection with the database.
	 */
	private Connection createConnection() {
		Connection connection = null;
		try {
			connection = DriverManager.getConnection(DBURL, USER, PASS);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return connection;
	}
	
	/**
	 * @return Returns the current connection with the database.
	 */
	public static Connection getConnection() {
		return oneInstance.createConnection();
	}
	
	/**
	 * Method designed for closing the statement.
	 * @param statement Represents a statement that is executed in the database.
	 */
	public static void close(Statement statement) {
		if (statement != null) {
			try {
				statement.close();
			} catch (SQLException e) {
				System.out.println("An error occured while trying to close");
			}
		}
	}
	
	/**
	 * Method designed for closing the result set.
	 * @param resultSet Represents a result set generated by a statement.
	 */
	public static void close(ResultSet resultSet) {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
				System.out.println("An error occured while trying to close the ResultSet");
			}
		}
	}
	
	/**
	 * Method designed for closing the actual connection with the database.
	 * @param connection Represent the current connection with the database.
	 */
	public static void close(Connection connection) {
		
		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
				System.out.println("An error occured while trying to close the ResultSet");
			}
		}
	}
}


